进程的特点，每一个进程都有自己的独立的一块内存空间、一组资源系统
其内部数据和状态都是完全独立的
进程的优点是提高CPU运行效率，在同一时间内执行多个程序，即并发执行。但是从严格上讲,也不是绝对的同
一时刻执行多个程序，只不过CPU在执行时通过时间片等调度算法不同进程高速切换。总结来说：

进程由操作系统调度，简单而且稳定
进程之间的隔离性好，一个进程崩溃不会影响其它进程
单进程编程简单
在多核情况下可以把进程和CPU进行绑定，充分利用CPU

当然，多进程也有一些缺点：

一般来说进程消耗的内存比较大
进程切换代价很高，进程切换也像线程一样需要保持上一个进程的上下文环境
在web编程中，如果一个进程来处理一个请求的话，如果要提高并发量就要提高进程数，而进程数量受内存和切换代价限制

线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少
的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.

同类的多个线程共享一块内存空间和一组系统资源，线程本身的数据通常只有CPU的寄存器数据，以及一个供程序执行时的堆栈。
线程在切换时负荷小，因此，线程也被称为轻负荷进程。一个进程中可以包含多个线程。
在JVM中，本地方法栈、虚拟机栈和程序计数器是线程隔离的，而堆区和方法区是线程共享的。

进程线程的区别

地址空间：进程内的一个执行单元；进程至少有一个线程；它们共享进程的地址空间;而进程有自己独立的地址空间
资源拥有：进程是资源分配和拥有的单位，同一个进程内的线程共享进程的资源
线程是处理器调度的基本单位，但进程不是
二者均可并发执行

 并发：多个事件在同一时间段内一起执行
 并行：多个事件在同一时刻同时执行

 多线程的调度

 在Java程序中，JVM负责线程的调度。线程调度是值按照特定的机制为多个线程分配CPU的使用权。

 调度的模式有两种：分时调度和抢占式调度。分时调度是所有线程轮流获得CPU使用权，并平均分配每个线程占用CPU的时间；
 抢占式调度是根据线程的优先级别来获取CPU的使用权。JVM的线程调度模式采用了抢占式模式。