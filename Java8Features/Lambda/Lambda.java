package LearnJava.Java8Features.Lambda;

import java.util.Arrays;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;

/**
 * Created by qimingzhang on 2017/5/2.
 */
public class Lambda {
    @FunctionalInterface
    interface LambdaInterface{
        void method();
    }
    public static void method(String input){
        System.out.println("method reference! " + input);
    }
    public static void main(String[] args) {
        Consumer consumer =  (value) -> System.out.println("I 'm a lambda expression of consumer!");
        consumer.accept(1);
        Function<?, ?> function = (String value) -> System.out.printf("%s%n",value);
        function = (value) -> System.out.printf("%s%n", value);
        function = value -> System.out.printf("%s%n", value);
        LambdaInterface voidFunction = () -> System.out.println("I'm a functional interface! I'm " +
                "generated by using Lambda expression");
        voidFunction.method();
        BiFunction<String, String, Object> biFunction = (String value, String another) -> {
            System.out.println(value);
            System.out.println(another);
            return value + " love " +  another;
        };
        System.out.println(biFunction.apply("qiming", "yiming"));

        biFunction = (value, another) -> {
          String.format("%s %s", value, another);
          return "marry me";
        };
        Lambda thisClass = new Lambda();
        Consumer<String> consumer1 = input -> method(input);
        consumer1.accept("hello");
        Consumer<String[]> b2 = Arrays::sort;
    }
}
