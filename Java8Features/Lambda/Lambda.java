package LearnJava.Java8Features.Lambda;

import java.util.Arrays;
import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;

/**
 * Created by qimingzhang on 2017/5/2.
 */
public class Lambda {
    private final String name;
    @FunctionalInterface
    interface LambdaInterface{
        void method();
    }


    public Lambda(String name){
        this.name = name;
    }

    public static void method(String input){

        System.out.println("method reference! " + input);
    }
    public static void main(String[] args) {
        Consumer consumer =  (value) -> System.out.println("I 'm a lambda expression of consumer!");
        consumer.accept(1);
        Function<?, ?> function = (String value) -> System.out.printf("%s%n",value);
        function = (value) -> System.out.printf("%s%n", value);
        function = value -> System.out.printf("%s%n", value);
        LambdaInterface voidFunction = () -> System.out.println("I'm a functional interface! I'm " +
                "generated by using Lambda expression");
        voidFunction.method();
        BiFunction<String, String, Object> biFunction = (String value, String another) -> {
            System.out.println(value);
            System.out.println(another);
            return value + " love " +  another;
        };
        System.out.println(biFunction.apply("qiming", "qiming"));

        biFunction = (value, another) -> {
          String.format("%s %s", value, another);
          return "marry me";
        };
        Lambda thisClass = new Lambda("lambda");
        Consumer<String> consumer1 = input -> method(input);
        consumer1.accept("hello");
        Consumer<String[]> b2 = Arrays::sort;
        Function<String, Lambda> lambdaConstructor = Lambda::new;
        Function<Integer,String> stringifier = Object::toString;

        // this is what is effectively final
        int a = 1;
        Runnable runnable = new Runnable() {
            @Override
            public void run() {
                System.out.println(a);
            }
        };
        String[] atp = {"Rafael Nadal", "Novak Djokovic",
                "Stanislas Wawrinka",
                "David Ferrer","Roger Federer",
                "Andy Murray","Tomas Berdych",
                "Juan Martin Del Potro"};
        List<String> players =  Arrays.asList(atp);


// 使用 lambda 表达式以及函数操作(functional operation)
        players.forEach((player) -> System.out.print(player + "; "));

// 在 Java 8 中使用双冒号操作符(double colon operator)
        players.forEach(System.out::println);
    }
}
